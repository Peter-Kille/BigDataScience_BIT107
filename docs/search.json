[
  {
    "objectID": "02_HPC_Cloud_Slurm.html#house-keeping",
    "href": "02_HPC_Cloud_Slurm.html#house-keeping",
    "title": "HPC, Cloud Computing & Job Schedulers",
    "section": "House Keeping",
    "text": "House Keeping\n\nlogin to the server\nHPC system available to big data masters students:\nhost\n\ngomphus.bios.cf.ac.uk\n\nUser name university username Password SSO Password Port 22\nWe suggest you use (MobaXterm)[https://mobaxterm.mobatek.net/] (PC) and terminal SSH (Mac) to access the server and MobaXtrem and (cyberduck)[https://cyberduck.io/] or (filezilla)[https://filezilla-project.org/] to allow secure file transfer (sftp) between server and local computer resources.\n\n\n\ncreate ‘symlinks’ to classdata and my data\nLinux ln command allows you to create a symbolic link (also symlink or soft link) to a file or directory (called the “target”) by specifying a path thereto. The format is ln -s [target location] [shortcut]. I recommend you create the following symlinks at your root position.\n\nln -s /mnt/clusters/sponsa/data/classdata classdata\n\nln -s /mnt/clusters/sponsa/data/${USER} mydata\n\nmkdir /mnt/scratch/${USER}\n\nln -s /mnt/scratch/${USER} scratch\n\n\n\nYou should now see two sym links at you root classdata and mydata that will allow you to address these locations using:\n~/classdata/\n~/mydata/"
  },
  {
    "objectID": "02_HPC_Cloud_Slurm.html#explore-your-hpc-resources",
    "href": "02_HPC_Cloud_Slurm.html#explore-your-hpc-resources",
    "title": "HPC, Cloud Computing & Job Schedulers",
    "section": "Explore your HPC resources",
    "text": "Explore your HPC resources\n\nYour disc quota\n\nReview what ‘storage’ resources are available to you.\nquota -us [username]\n\nThis should display the following information:\nDisk quotas for user smbpk (uid 31961):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFilesystem\nspace\nquota\nlimit\ngrac\nfiles\nquota\nlimit\ngrace\n\n\n\n\n/dev/mapper/cl-root\n32K\n5120M\n7168M\n\n13\n0\n0\n\n\n\n192.168.2.41:/mnt/data/clusters/anax\n4K\n1978G\n2078G\n\n6\n0\n0\n\n\n\n\n\nCheck your personal disc usage in mydata (du is the disc utility -h = human readable, -s = summarise )\ndu -sh ~/mydata/\n\n\n\nHPC resources\nThe head node on gomphus is a 16 cpu / 32 Gb RAM server…..but it provides access to a serise of servers.\nThe head node has a specific script that displays the resources available to you. Run the command:\ngomphus.node_availability.sh\nThis should display the following information:\nKey ('CPUS' column):\n  A = # cores Allocated\n  I = # cores Idle\n  O = # cores not 'Idle' or 'Allocated'\n  T = Total # of cores\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNODELIST\nNODES\nPARTITION\nSTATE\nCPUS\nS:C:T\nMEMORY\nTMP_DISK\nWEIGHT\nAVAIL_FE\nCPUS(A/I/O/T)\nREASON\n\n\n\n\ngomphus2\n1\ndefq*\nidle\n64\n1:64:1\n93375\n0\n1\n(null)\n0/64/0/64\nnone\n\n\ngomphus3\n1\ndefq*\nidle\n64\n1:64:1\n93375\n0\n1\n(null)\n0/64/0/64\nnone\n\n\ngomphus1\n1\ndefq*\nidle\n32\n1:32:1\n62250\n0\n1\n(null)\n0/32/0/32\nnone"
  },
  {
    "objectID": "02_HPC_Cloud_Slurm.html#the-slurm-job-scheduler",
    "href": "02_HPC_Cloud_Slurm.html#the-slurm-job-scheduler",
    "title": "HPC, Cloud Computing & Job Schedulers",
    "section": "The Slurm Job Scheduler",
    "text": "The Slurm Job Scheduler\nThe slurm job scheduler is software that controls and monitors access to high-performance computing hardware. It allocates resources (cpus/cores/RAM) on a per-job basis."
  },
  {
    "objectID": "02_HPC_Cloud_Slurm.html#slurm-partitions-queues",
    "href": "02_HPC_Cloud_Slurm.html#slurm-partitions-queues",
    "title": "HPC, Cloud Computing & Job Schedulers",
    "section": "Slurm Partitions (Queues)",
    "text": "Slurm Partitions (Queues)\nA number of slurm partitions (queues) may exist on any slurm cluster, and each queue will suit certain types of jobs. Each of the separate queues will handle jobs slightly differently, or will have varying resources available to it. Below is a list of queues available on our HPC systems, and the typical types of jobs they accommodate.\nGomphus Queues\n\n\n\n\n\n\n\n\n\npartition(queue) name\ndefault?\ndescription\n\n\n\n\n\ndefq\n✔\nbatch jobs, low mem/cpu requirement"
  },
  {
    "objectID": "02_HPC_Cloud_Slurm.html#submitting-jobs-the-slurm-job-script",
    "href": "02_HPC_Cloud_Slurm.html#submitting-jobs-the-slurm-job-script",
    "title": "HPC, Cloud Computing & Job Schedulers",
    "section": "Submitting Jobs (The Slurm Job-Script)",
    "text": "Submitting Jobs (The Slurm Job-Script)\nThe typical method to start a job on a slurm cluster is to first create a job-script, then submit that job-script to the slurm queue using the sbatch command. The job-script is laid out in a certain way (examples below), which will first request resources on the compute nodes, and then define the individual steps of your job. Below is an example job script for gomphus slurm using the partition defq. We’ll name the job-script submit.sh:\n\n#!/bin/bash\n#SBATCH --partition=defq       # the requested queue\n#SBATCH --nodes=1              # number of nodes to use\n#SBATCH --tasks-per-node=1     #\n#SBATCH --cpus-per-task=1      #   \n#SBATCH --mem-per-cpu=1000     # in megabytes, unless unit explicitly stated\n#SBATCH --error=%J.err         # redirect stderr to this file\n#SBATCH --output=%J.out        # redirect stdout to this file\n##SBATCH --mail-user=[insert email address]@Cardiff.ac.uk  # email address used for event notification\n##SBATCH --mail-type=end                                   # email on job end\n##SBATCH --mail-type=fail                                  # email on job failure\n\necho \"Some Usable Environment Variables:\"\necho \"=================================\"\necho \"hostname=$(hostname)\"\necho \\$SLURM_JOB_ID=${SLURM_JOB_ID}\necho \\$SLURM_NTASKS=${SLURM_NTASKS}\necho \\$SLURM_NTASKS_PER_NODE=${SLURM_NTASKS_PER_NODE}\necho \\$SLURM_CPUS_PER_TASK=${SLURM_CPUS_PER_TASK}\necho \\$SLURM_JOB_CPUS_PER_NODE=${SLURM_JOB_CPUS_PER_NODE}\necho \\$SLURM_MEM_PER_CPU=${SLURM_MEM_PER_CPU}\n\n# Write jobscript to output file (good for reproducibility)\ncat $0\n\nThe job can be submitted from the head node of the slurm cluster using the command:\nsbatch submit.sh\nThis particular job does nothing interesting except print out some useful job-specific slurm environment variables, which you may utilise in your job-scripts.\nThis job-script is actually just a simple bash script, and in bash the # character will comment out the remaining text on that line, and will not be parsed by the bash interpreter. In a slurm job-script however, the lines starting with #SBATCH is parsed by slurm before the script is handed over to the bash interpreter. The #SBATCH lines will inform the slurm scheduler of the amount of resources requested for the job.\nIf you would like to comment out certain slurm commands in your job-script, simply add an extra # at the beginning of the #SBATCH lines (as we have done in the above example for all email-related commands).\nSome further useful (but not exhaustive) SBATCH options are detailed:\n\n\n\n\n\n\n\nSBATCH option\nDescription\n\n\n\n\n–ntasks-per-node\nallocate n tasks per allocated node.\n\n\n–nodes\nset the number of nodes that the job will require. Each node will have –ntasks-per-node processes started\n\n\n–ntasks\nspawn n tasks (default=1). This determines how many processes will be spawned (for MPI jobs).\n\n\n–cpus-per-task\nallocate n CPUs per task. This option is needed for multi-threaded jobs. Typically n should be equal to the number of threads your program spawns.\n\n\n–partition\nselect the partition (queue) where you want to execute your job. Depending on the HPC system you are using, there may, or may not, be much choice.\n\n\n–mem-per-cpu\nspecify the the memory needed per allocated CPU in MB.\n\n\n–job-name\nname your job. This name will be shown in the queue status and email alerts. It is also important for job chaining.\n\n\n–output\nspecify a filename that will be used to store the stdout of your job. The slurm variable %J is useful here which slurm will interpret as the job_id of the job.\n\n\n–error\nsimilar to the –output option, but redirect your job’s stderr.\n\n\n\n\nResource Limitations\nOn the a slurm cluster, the slurm scheduler keeps track of both requested CPUs, and memory. If your job exceeds the currently available resources then your job will be queued until sufficient resources are available. If your job exceeds the total amount of resources available on the compute nodes then your job submission will fail and will not be queued, in which case an error will be returned."
  },
  {
    "objectID": "02_HPC_Cloud_Slurm.html#my-first-slurm-job---excersise",
    "href": "02_HPC_Cloud_Slurm.html#my-first-slurm-job---excersise",
    "title": "HPC, Cloud Computing & Job Schedulers",
    "section": "My first slurm Job - Excersise",
    "text": "My first slurm Job - Excersise\nTo submit an appropriately configured job-script to the slurm queue, use the command:\n\nsbatch submit.sh\n\nUse cat or less to rReview the content of the .out and .err files - note the .out file should contain a summary of the varibles used by the script and the program you ran.\nThe gomphus cluster has a number of example job-scripts (located under ~/classdata/REFS/slurm on the gompus.bios.cf.ac.uk server). You may submit these jobs with the following commands on the gomphus cluster:\n\n# first cd to your allocated ~/mydata/ folder.\nmkdir -p test_jobs && cd test_jobs\ncp ~/classdata/REFS/slurm/slurm_examples/example1/* .\nsbatch example1.sh\n\nWhat is the function of this example script ??"
  },
  {
    "objectID": "02_HPC_Cloud_Slurm.html#loading-programs-in-slurm-scripts",
    "href": "02_HPC_Cloud_Slurm.html#loading-programs-in-slurm-scripts",
    "title": "HPC, Cloud Computing & Job Schedulers",
    "section": "Loading programs in slurm scripts",
    "text": "Loading programs in slurm scripts\nReview what programs are available too you using\n\nmodule avail\n\nPrograms should be loaded using ‘module load’ after the slurm parameters have been defined and before you define variable or provide commands for you program.\nmodule list for gomphus (2022)\n\n-------------- /mnt/clusters/sponsa/software/nospack/modulefiles --------------\nartemis/18.2.0              multiqc/1.13              rnammer/1.2\nbioconvert/0.4.3            panaroo/1.3.0             snippy/v4.6.0\nbioperl-live/release-1-7-2  perl/5.34.0               snp-sites/2.5.1\nblast/2.12.0                prokka_mambaforge/1.14.6  SPAdes/3.15.5\nfmlrc/v1.0.0                python/3.7.4              treeview/1.2.0\ngromacs/2022.3              python/3.10.5             unicycler/v0.5.0\njava/11.0.2                 qiime2/2022.8\nmitos/2.0.4                 quast/5.2.0\n\n-- /mnt/clusters/sponsa/software/spack/share/spack/modules/linux-rocky8-zen ---\nabyss/2.3.1        fastqc/0.11.9         picard/2.26.2       velvet/1.2.10\nalan/2.1.1         fasttree/2.1.10       pilon/1.22          vt/0.5772\nbarrnap/0.8        fastx-toolkit/0.0.14  prokka/1.14.6       wtdbg2/2.3\nbcftools/1.14      figtree/1.4.3         racon/1.4.3\nbedtools2/2.30.0   freebayes/1.3.6       raxml-ng/1.0.2\nblast-plus/2.12.0  gdbm/1.19             samtools/1.15.1\nbowtie2/2.4.2      hmmer/3.3.2           seqtk/1.3\ncaliper/2.8.0      igv/2.12.3            spades/3.15.3\ncdhit/4.8.1        mafft/7.481           star/2.7.6a\ndos2unix/7.4.2     mcl/14-137            subread/2.0.2\ndyninst/12.2.0     minimap2/2.14         tbl2asn/2022-04-26\nemboss/6.6.0       ncurses/6.3           tmux/3.2a\nfastp/0.20.0       perl-bioperl/1.7.6    trimmomatic/0.39\n\n----------------------- /usr/share/Modules/modulefiles ------------------------\ndot  module-git  module-info  modules  null  use.own"
  },
  {
    "objectID": "02_HPC_Cloud_Slurm.html#viewing-information-about-a-job",
    "href": "02_HPC_Cloud_Slurm.html#viewing-information-about-a-job",
    "title": "HPC, Cloud Computing & Job Schedulers",
    "section": "Viewing Information About a Job",
    "text": "Viewing Information About a Job\n\nInformation on Running Jobs\nIf your job-script used the srun command to kick off a (parallel) process, then slurm will be able to provide live information about your running job. All information about your running job can be listed with the sstat command:\n\nsstat -l -j [jobid]\n\nIn particular it may be useful to compare the fields MaxRSS and ReqMem. These fields report the actual max memory of a single task, and the requested memory of a single task, respectively. You may then tune any future job-scripts to more accurately represent your jobs, which will lead to better queue efficiency - meaning your job will likely start sooner.\nIf any application call within your job-script did not use the srun command, then no live information will be available. Instead, wait for your job to finish and use the sacct command, as described below.\n\n\nInformation on Completed Jobs\nSimilar to the sstat command used for running jobs, the sacct command will provide equivalent information about completed jobs."
  },
  {
    "objectID": "02_HPC_Cloud_Slurm.html#useful-slurm-related-commands",
    "href": "02_HPC_Cloud_Slurm.html#useful-slurm-related-commands",
    "title": "HPC, Cloud Computing & Job Schedulers",
    "section": "Useful Slurm-Related Commands",
    "text": "Useful Slurm-Related Commands\nThe sinfo command can supply a lot of useful information about the nodes and available resources. A useful set of parameters of which to call sinfo with is the following:\n\nsinfo -o \"%24N %.5D %9P %11T %.4c %.8z %.8m %.8d %.6w %8f %15C %20E\"\nNODELIST                 NODES PARTITION STATE       CPUS    S:C:T   MEMORY TMP_DISK WEIGHT AVAIL_FE CPUS(A/I/O/T)   REASON              \ngomphus[1-4]                 4 defq*     idle          32   1:32:1    62250        0      1 (null)   0/128/0/128     none \n\nHere, we see a list of nodes on the gomphus cluster (grouped by partition, and by state), and information about the nodes. In this particular instance we see that gomphus has 4 nodes [1-4] each with 32 CPUS. The CPUS(A/I/O/T) column shows that the defq partition has a total of 0 CPUs Allocated, 128 CPUs Idle, 0 in state Other, making a Total of 128 (all 4 nodes combined).\nThe above command is a bit of a handful. You have already used the wrapper script created for you gomphus.job_history.sh\n\nother useful commands\nTo cancel a running job:\n\n$ scancel [jobid]\n\ninformation about the compute nodes:\n\n$ sinfo -lNe\n\nList the current status of the slurm queue:\n\n$ squeue\n\nFind information on previously completed jobs:\n\n$ sacct\n\nList information on running jobs:\n\n$ sstat"
  },
  {
    "objectID": "02_HPC_Cloud_Slurm.html#constructing-a-slurm-job---good-practice",
    "href": "02_HPC_Cloud_Slurm.html#constructing-a-slurm-job---good-practice",
    "title": "HPC, Cloud Computing & Job Schedulers",
    "section": "Constructing a slurm Job - good practice",
    "text": "Constructing a slurm Job - good practice\nAdapt RNAseq processing script 1-QC.sh (see session Session5 -RNAseq-Processing) to run under slurm (do not run script 2 – building genome) ** if you find this easy try adapting script 3,4 and 5.\nYou may want to discuss the resources required for the job.\nHints:\ndefine directories using full path derived with PWD -P\n\n~/mydata/ = /mnt/clusters/sponsa/data/$USER/\n\nWhen creating composite variables use enclose them in quotation marks to ensure they expand.\n\n\"${indir}/fastq/${i}_1.fastq\""
  },
  {
    "objectID": "02_HPC_Cloud_Slurm.html#interactive-jobs",
    "href": "02_HPC_Cloud_Slurm.html#interactive-jobs",
    "title": "HPC, Cloud Computing & Job Schedulers",
    "section": "Interactive Jobs",
    "text": "Interactive Jobs\nEnter an interactive job and use this to review the files created by the RNAseq processing scripts.\n\n##Use any avalible node\nsrun -c 4 --mem=8G -p defq --pty bash\n\n##use a specific node - in this example called gomphus3\n\nsrun -c 4 --mem=8G -p defq --nodelist=gomphus3 --pty bash\n\nRemember to exit the interactive job when you are finished by typing exit\nAdvanced: Some HPC architectures will allow you to directly write to the ‘local’ harddrive /tmp For jobs with lots of I/O and where the nodes are using new M2 SSD drives this can accelerate certain types of jobs."
  },
  {
    "objectID": "02_HPC_Cloud_Slurm.html#blast-as-an-example",
    "href": "02_HPC_Cloud_Slurm.html#blast-as-an-example",
    "title": "HPC, Cloud Computing & Job Schedulers",
    "section": "blast as an example",
    "text": "blast as an example\nWe take a closer look at running jobs on our cluster, we should provide examples of benchmarking code in order to find how to best utilise the resources available.\nWe start off by benchmarking a simple blast job, initially running over a single core, then parallelizing the job using blast’s built-in threading. All jobs are run on a single node, and we test a number of nodes and compare results. For example source code, see the folder ~/classdata/REFS/slurm/slurm_examples/indepth_parallelizing_blastp on the gomphus server.\nRemember to run all commands in your ~/mydata/[directory].\nFirst we obtain the sample data:\n\n# this is already downloaded to ~/classdata/REFS/slurm/slurm_examples/indepth_parallelizing_blastp/\ncurl -L -o TAIR10_pep.fasta  https://www.arabidopsis.org/download_files/Proteins/TAIR10_protein_lists/TAIR10_pep_20101214\n\n## we can prepare the data within a interactive job\nsrun -c 4 --mem=8G -p defq --pty bash\n\n## navigate to mydata directory\ncd ~/mydata/\n\n## make a dirctory for blast test\nmkdir -p blast_test && cd blast_test \n\n## copy TAIR file accross from class data to local file system\ncp /mnt/clusters/sponsa/data/classdata/Bioinformatics/REFS/slurm/slurm_examples/indepth_parallelizing_blastp/run2_split-files4/TAIR10_pep.fasta .\n\n## Makeblast db from downloaded file\nmodule load blast/2.12.0\nmakeblastdb -in TAIR10_pep.fasta -parse_seqids -dbtype prot -title \"Small protein database\" -out TAIR10_pep\n\n##copy the query sub-set\ncp /mnt/clusters/sponsa/data/classdata/Bioinformatics/REFS/slurm/slurm_examples/indepth_parallelizing_blastp/TAIR10_pep_4000.fasta .\n\nexit\n\nNow create the job Script - blastp.sh\n\n#!/bin/bash\n#SBATCH --partition=defq       # the requested queue\n#SBATCH --nodes=1              # number of nodes to use\n#SBATCH --tasks-per-node=1     # \n#SBATCH --cpus-per-task=1      #   \n#SBATCH --mem-per-cpu=92000     # in megabytes, unless unit explicitly stated\n#SBATCH --error=%J.err         # redirect stderr to this file\n#SBATCH --output=%J.out        # redirect stdout to this file\n##SBATCH --mail-user=[insert email address]@Cardiff.ac.uk  # email address used for event notification\n##SBATCH --mail-type=start                                 # email on job start  \n##SBATCH --mail-type=end                                   # email on job end\n##SBATCH --mail-type=fail                                  # email on job failure\n\necho \"Usable Environment Variables:\"\necho \"=============================\"\necho \\$SLURM_JOB_ID=${SLURM_JOB_ID} \necho \\$SLURM_NTASKS=${SLURM_NTASKS}\necho \\$SLURM_NTASKS_PER_NODE=${SLURM_NTASKS_PER_NODE}\necho \\$SLURM_CPUS_PER_TASK=${SLURM_CPUS_PER_TASK}\necho \\$SLURM_JOB_CPUS_PER_NODE=${SLURM_JOB_CPUS_PER_NODE}\necho \\$SLURM_MEM_PER_CPU=${SLURM_MEM_PER_CPU}\ncat $0\n\nmodule load blast/2.12.0\n\nindir=\"/mnt/clusters/sponsa/data/${USER}/blast_test\"\n\ndbdir=\"/mnt/clusters/sponsa/data/${USER}/blast_test\"\n\noutdir=\"/mnt/clusters/sponsa/data/${USER}/blast_test\"\n\ntime blastp -num_threads ${SLURM_CPUS_PER_TASK} \\\n            -query \"${indir}/TAIR10_pep_4000.fasta\" \\\n            -task blastp \\\n            -num_descriptions 16 \\\n            -num_alignments 1 \\\n            -db ${dbdir}/TAIR10_pep \\\n            -out \"${outdir}/blastp_cpu${SLURM_CPUS_PER_TASK}_job${SLURM_JOBID}.txt\"\n\n\nRun this blast script a number of times, increasing the –cpus-per-task and decreasing the –mem-per-cpu variables accordingly (ie 2 cpus-per-task & 46000 mem-per-cpu, 3 cpus-per-task & 30600 mem-per-cpu …..16 cpus-per-task & 5750 mem-per-cpu. Review the benchmarks considering the resources needed and the time taken to execute the jobs\nWhat are your conclusions"
  },
  {
    "objectID": "02_HPC_Cloud_Slurm.html#reviewing-and-optimising-job-resources",
    "href": "02_HPC_Cloud_Slurm.html#reviewing-and-optimising-job-resources",
    "title": "HPC, Cloud Computing & Job Schedulers",
    "section": "Reviewing and optimising job resources",
    "text": "Reviewing and optimising job resources\n\nUse gomphus.job_history.sh to review the efficiency of your job"
  },
  {
    "objectID": "02_HPC_Cloud_Slurm.html#parallel-jobs",
    "href": "02_HPC_Cloud_Slurm.html#parallel-jobs",
    "title": "HPC, Cloud Computing & Job Schedulers",
    "section": "Parallel Jobs",
    "text": "Parallel Jobs\nThere are a number of different scenarios in which you may want to parallelize your job:\n\nEmbarrassingly parallel\nMPI - a multi-process application (possibly across multiple compute hosts)\nmulti-threading - shared memory using OpenMP or perhaps pthreads.\nmultiple instances of a single application.\n…plus more scenarios but are probably out of scope of this tutorial."
  },
  {
    "objectID": "02_HPC_Cloud_Slurm.html#embarrassingly-parallel",
    "href": "02_HPC_Cloud_Slurm.html#embarrassingly-parallel",
    "title": "HPC, Cloud Computing & Job Schedulers",
    "section": "Embarrassingly parallel",
    "text": "Embarrassingly parallel\nMany processes in genomics do the same task on large arrays of data. One of the simplest way of speeding up the process is to split up the input files and perfrom the same task multiple times at the same time - this is called an _‘Embarrassingly parallel’ task.\nLets do this for the blast example that we started in the last task. We can investigate whether there are any further methods of improving performance, and attempt to find a improvemet in the initial blast job’s solution to reduce the time taken. As it turns out, it is possible in this situation to split the input fasta file into a number of sections, and have an independent job acting on each of those sections. Each independent job could then be parallelized, say over 8 threads, and all jobs can run concurrently.\nWe create a job script (mammoth_8thread_split_1of4.sh) that will run blast command on the first file-section only.\nWe perform the following sequence of commands, first splitting the input fasta file into 4 parts, then creating the 4 independent job-scripts, and submit the jobs.\n\n## enter a interactive Job\nsrun -c 4 --mem=8G -p defq --pty bash\ncd ~/mydata/blast_test/\n\n## a new folder\nmkdir split-files4\ncd split-files4/\ncp ~/TAIR10_pep_4000.fasta  .\n#\n## split the fasta file into 4 equal(ish) sections\ncurl -L https://raw.githubusercontent.com/gmarnellos/Trinotate_example_supplement/master/split_fasta.pl | perl /dev/stdin  TAIR10_pep_4000.fasta  TAIR10_pep.vol 1000\n\ncreate script that will spawn blast_jobs (use nano or vi) - spawn_blastp.sh\n\n!#/bin/bash\n\nfor i in {1..4};do\n\nexport i\n\nsbatch blastp.sh\n\ndone\n\nmake script executable chmod +x spawn_blastp.sh\nEdit blast job so that each time it is called it uses a different section of the query file\n\n#!/bin/bash\n#SBATCH --partition=defq       # the requested queue\n#SBATCH --nodes=1              # number of nodes to use\n#SBATCH --tasks-per-node=1     # \n#SBATCH --cpus-per-task=8      #   \n#SBATCH --mem-per-cpu=11500    # in megabytes, unless unit explicitly stated\n#SBATCH --error=%J.err         # redirect stderr to this file\n#SBATCH --output=%J.out        # redirect stdout to this file\n##SBATCH --mail-user=[insert email address]@Cardiff.ac.uk  # email address used for event notification\n##SBATCH --mail-type=start                                 # email on job start  \n##SBATCH --mail-type=end                                   # email on job end\n##SBATCH --mail-type=fail                                  # email on job failure\n\necho \"Usable Environment Variables:\"\necho \"=============================\"\necho \"hostname=$(hostname)\"\necho \\$SLURM_JOB_ID=${SLURM_JOB_ID} \necho \\$SLURM_NTASKS=${SLURM_NTASKS}\necho \\$SLURM_NTASKS_PER_NODE=${SLURM_NTASKS_PER_NODE}\necho \\$SLURM_CPUS_PER_TASK=${SLURM_CPUS_PER_TASK}\necho \\$SLURM_JOB_CPUS_PER_NODE=${SLURM_JOB_CPUS_PER_NODE}\necho \\$SLURM_MEM_PER_CPU=${SLURM_MEM_PER_CPU}\n\ncat $0\n\nmodule load blast/2.12.0\n\nindir=\"/mnt/clusters/sponsa/data/${USER}/blast_test/split-files4\"\n\ndbdir=\"/mnt/clusters/sponsa/data/${USER}/blast_test\"\n\noutdir=\"/mnt/clusters/sponsa/data/${USER}/blast_test/split-files4\"\n\ntime blastp -num_threads ${SLURM_CPUS_PER_TASK} \\\n            -query \"${indir}/TAIR10_pep.vol.${i}.fasta\" \\\n            -task blastp \\\n            -num_descriptions 16 \\\n            -num_alignments 1 \\\n            -db ${dbdir}/TAIR10_pep \\\n            -out \"${outdir}/blastp_vol${i}_cpu${SLURM_CPUS_PER_TASK}_job${SLURM_JOBID}.txt\"\n\nPerform file-splitting procedure for both a 2-split and a 4-split of the original fasta file. The ‘time-to-solution’ results are added to the original benchmark chart. We assume that all jobs run concurrently, and we take the wall-time for the longest job"
  },
  {
    "objectID": "02_HPC_Cloud_Slurm.html#mpi-jobs",
    "href": "02_HPC_Cloud_Slurm.html#mpi-jobs",
    "title": "HPC, Cloud Computing & Job Schedulers",
    "section": "MPI Jobs",
    "text": "MPI Jobs\nOur example MPI job is based on a quantum espresso calculation. This script utilises the srun command, which is part of the slurm family of tools to run a parallel job on a cluster\n\n#!/bin/bash\n#SBATCH --partition=mammoth    # the requested queue\n#SBATCH --job-name=qe_mpi      # name the job           \n#SBATCH --nodes=1              # number of nodes to use\n#SBATCH --ntasks=32            # total number of tasks (processes)\n#SBATCH --mem-per-cpu=100      # in megabytes, unless unit explicitly stated\n#SBATCH --error=%J.err         # redirect stderr to this file\n#SBATCH --output=%J.out        # redirect stdout to this file\n##SBATCH --mail-user=[insert email address]@Cardiff.ac.uk  # email address used for event notification\n##SBATCH --mail-type=end                                   # email on job end\n##SBATCH --mail-type=fail                                  # email on job failure\n\nmodule load  qe/6.0\n\necho \"Usable Environment Variables:\"\necho \"=============================\"\necho \"hostname=$(hostname)\"\necho \\$SLURM_JOB_ID=${SLURM_JOB_ID}\necho \\$SLURM_NTASKS=${SLURM_NTASKS}\necho \\$SLURM_NTASKS_PER_NODE=${SLURM_NTASKS_PER_NODE}\necho \\$SLURM_CPUS_PER_TASK=${SLURM_CPUS_PER_TASK}\necho \\$SLURM_JOB_CPUS_PER_NODE=${SLURM_JOB_CPUS_PER_NODE}\necho \\$SLURM_MEM_PER_CPU=${SLURM_MEM_PER_CPU}\necho \"module list:\"\nmodule list 2&gt;&1\n\n# Some of these environment variables are utilised by the qe executable itself\nexport ESPRESSO_DATAPATH=/mnt/clusters/sponsa/data/classdata/Bioinformatics/REFS/slurm/slurm_examples/example2_mpi/\nexport ESPRESSO_PSEUDO=${ESPRESSO_DATAPATH}\nexport ESPRESSO_TMPDIR=${ESPRESSO_DATAPATH}/${SLURM_JOB_ID}\n\n# handy to place this in job output for future reference...\ncat ${ESPRESSO_DATAPATH}/atom.in\n\n# execute the parallel job (we also time it)\ntime srun -n ${SLURM_NTASKS} pw.x &lt; ${ESPRESSO_DATAPATH}/atom.in &gt; atom.job${SLURM_JOB_ID}.out\n\nThe job requests 32 cores to be allocated, and runs the srun command with the argument -n ${SLURM_NTASKS} which tells srun to spawn the mpi-job with the total number of processes requested. Quantum Espresso utilises the environment variable ESPRESSO_TMPDIR which points to a temporary folder. We design this in our slurm script to point to a subfolder.\nAn alternative storage location is the compute node’s local storage. This can improve runtime I/O performance. However, local storage on the compute nodes is limited (Gigabytes not Terabytes), and it’s availability is a little hidden from the user, so take care not to fill up the disk(!) and remove all files from the compute node’s local storage within the job script (your only access to the compute node’s /local folder is via the slurm script). An alternative job script which utilises a compute node’s /local storage is provided on the gomphus server /mnt/clusters/sponsa/data/classdata/Bioinformatics/REFS/slurm/slurm_examples/example2_mpi/example2_mpi_localstorage.sh."
  },
  {
    "objectID": "02_HPC_Cloud_Slurm.html#threaded-jobs",
    "href": "02_HPC_Cloud_Slurm.html#threaded-jobs",
    "title": "HPC, Cloud Computing & Job Schedulers",
    "section": "Threaded Jobs",
    "text": "Threaded Jobs\nA number of popular bioinformatics software are capable of parallelising execution using threads (usually OpenMP or pthreads). This parallelisation method does not normally use distributed memory, so the application will need to be run on a single node. Our threaded example slurm-script is based on BLAST+. The job script is listed:\n\n#!/bin/bash\n#SBATCH --partition=defq\n#SBATCH --nodes=1\n#SBATCH --tasks-per-node=1\n#SBATCH --cpus-per-task=8\n#SBATCH --mem-per-cpu=2000\n#SBATCH --error=%J.err\n#SBATCH --output=%J.out\n##SBATCH --mail-type=end\n##SBATCH --mail-user=[your.email@address]\n\n\n# Example slurm script\n#  This script is a little wasteful of resources,\n#  but demonstrates a simple pipeline.\n#  \n#  For a more efficient use of resources, please consider\n#  running the pipeline as a series of jobs (chain-jobs).\n\n\necho \"Usable Environment Variables:\"\necho \"=============================\"\necho \"hostname=$(hostname)\"\necho \\$SLURM_JOB_ID=${SLURM_JOB_ID}\necho \\$SLURM_NTASKS=${SLURM_NTASKS}\necho \\$SLURM_NTASKS_PER_NODE=${SLURM_NTASKS_PER_NODE}\necho \\$SLURM_CPUS_PER_TASK=${SLURM_CPUS_PER_TASK}\necho \\$SLURM_JOB_CPUS_PER_NODE=${SLURM_JOB_CPUS_PER_NODE}\necho \\$SLURM_MEM_PER_CPU=${SLURM_MEM_PER_CPU}\necho \"module list:\"\nmodule list 2&gt;&1\n\nDATAFOLDER=/mnt/clusters/sponsa/data/classdata/Bioinformatics/REFS/slurm/slurm_examples/example3_pipeline\n\n\n### The data used in this pipeline has already been downloaded and stored in $DATAFOLDER.\n### Here are the commands used to download the data...\n# cd $DATAFOLDER\n# curl -LO https://data.broadinstitute.org/Trinity/Trinotate_v2.0_RESOURCES/uniprot_sprot.trinotate_v2.0.pep.gz\n# gunzip uniprot_sprot.trinotate_v2.0.pep.gz\n# curl -LO https://data.broadinstitute.org/Trinity/Trinotate_v2.0_RESOURCES/Pfam-A.hmm.gz\n# gunzip Pfam-A.hmm.gz\n# curl -L -o Trinotate.sqlite.gz https://data.broadinstitute.org/Trinity/Trinotate_v2.0_RESOURCES/Trinotate.sprot_uniref90.20150131.boilerplate.sqlite.gz\n# gunzip Trinotate.sqlite.gz\n# curl -LO ftp://ftp.ensembl.org/pub/release-82/fasta/mus_musculus/cdna/Mus_musculus.GRCm38.cdna.all.fa.gz\n# gunzip Mus_musculus.GRCm38.cdna.all.fa.gz\n# curl -LOgz https://github.com/gmarnellos/Trinotate_example_supplement/raw/master/mouse38_cdna.fa.gz\n# gunzip mouse38_cdna.fa.gz\n\n# Now we get on to the pipeline\n\n# make a link to all datafiles\nfor f in ${DATAFOLDER}/* ; do ln -s $f ; done\n\n#Index the SwissProt database for use with blast\n\nmodule load blast\nmakeblastdb -version\nmakeblastdb -in uniprot_sprot.trinotate_v2.0.pep -dbtype prot\nmodule unload blast\n\n# Prepare the Pfam database for use with hmmscan\nmodule load hmmer\nhmmpress -h\nhmmpress Pfam-A.hmm\nmodule load hmmer\n\n# Use Transdecoder to produce the most likely longest-ORF peptide candidates\nmodule load TransDecoder/v3.0.1\nTransDecoder.LongOrfs -t mouse38_cdna.fa\nTransDecoder.Predict -t mouse38_cdna.fa\nmodule unload TransDecoder/v3.0.1\n\nmodule load blast\nblastx -query mouse38_cdna.fa -db uniprot_sprot.trinotate.pep -num_threads ${SLURM_CPUS_PER_TASK} -max_target_seqs 1 -outfmt 6 &gt; blastx.vol.outfmt6\nblastp -query mouse38_cdna.fa.transdecoder.pep -db uniprot_sprot.trinotate_v2.0.pep -num_threads ${SLURM_CPUS_PER_TASK} -max_target_seqs 1 -outfmt 6 &gt; blastp.vol.outfmt6\nmodule unload blast\n\n# Identify protein domains\nmodule load hmmer/3.1b2\nhmmscan --cpu ${SLURM_CPUS_PER_TASK} --domtblout TrinotatePFAM.out Pfam-A.hmm mouse38_cdna.fa.transdecoder.pep &gt; pfam.log\nmodule unload hmmer/3.1b2\n\n# Produce the Gene/Transcript relationship\ngrep \"^&gt;\" Mus_musculus.GRCm38.cdna.all.fa   | perl -p -e 's/^&gt;(\\S+).*\\s+gene:(ENSMUSG\\d+).*$/$2\\t$1/' &gt; gene_transcript_map.txt\n\n# Now populate the sqlite database\nmodule load Trinotate/v3.0.1\nTrinotate Trinotate.sqlite init --gene_trans_map gene_transcript_map.txt --transcript_fasta mouse38_cdna.fa --transdecoder_pep mouse38_cdna.fa.transdecoder.pep\nTrinotate Trinotate.sqlite LOAD_swissprot_blastp blastp.vol.outfmt6\nTrinotate Trinotate.sqlite LOAD_swissprot_blastx blastx.vol.outfmt6\nTrinotate Trinotate.sqlite LOAD_pfam TrinotatePFAM.out\n# Create the annotation report\nTrinotate Trinotate.sqlite report -E 0.00001 &gt; trinotate_annotation_report.xls\nmodule unload Trinotate/v3.0.1\n\nThis is quite a busy job-script (and also inefficient on resources!). It runs through a number of steps, but some of those steps will utilise parallelisation via threading, and use the slurm environment variable SLURM_CPUS_PER_TASK to inform the application(s) of the correct number of threads.\nBut why is this job inefficient on resources? This particular job involves a number of steps: some utilising parallelisation, and some not; some memory-hungry, others not. The problem with this is that the job has allocated to it a set amount of resources (compute and memory), which is allocated to it for the lifetime of the job. But only at certain times in this job are the resources requested fully utilised. At all other times this job is running, the resources are allocated, but not used, and therefore making those resources unavailable to other jobs. This has a knock-on effect of increasing queue-times, and leaves expensive resources idle.\nA much more efficient way of running the same pipeline is to chain the job - split the pipeline into component parts and submit separate jobs for each of those parts. Each section of the pipeline (having its own job-script) is then free to allocate resources specific to that section of the pipeline. In the slurm world this is called job chaining, and has been exemplified in the next section using the same pipeline."
  },
  {
    "objectID": "02_HPC_Cloud_Slurm.html#job-chains-and-job-dependency",
    "href": "02_HPC_Cloud_Slurm.html#job-chains-and-job-dependency",
    "title": "HPC, Cloud Computing & Job Schedulers",
    "section": "Job Chains and Job Dependency",
    "text": "Job Chains and Job Dependency\nChaining jobs is a method of sequentially running dependent jobs. Our chain-job example is a pipeline of 6 separate job scripts, based on the blast+ pipeline of the previous section. We do not show the full six job-scripts here for brevity, but are available on the gomphus cluster under /mnt/clusters/sponsa/data/classdata/Bioinformatics/REFS/slurm/slurm_examples/example4_chain.\nSlurm has an option -d or –dependency that allows to specify that a job is only permitted to start if another job finished successfully.\nIn the folder (gomphus cluster) /mnt/clusters/sponsa/data/classdata/Bioinformatics/REFS/slurm/slurm_examples/example4_chain there are 6 separate job-scripts that need to be executed in a certain order. They are numbered in the correct pipeline order:\n\n[user@gomphus ~]$ tree  /mnt/clusters/sponsa/data/classdata/Bioinformatics/REFS/slurm/slurm_examples/example4_chain\n/mnt/clusters/sponsa/data/classdata/Bioinformatics/REFS/slurm/slurm_examples/example4_chain\n├── example4_chain-step1.sh\n├── example4_chain-step2.sh\n├── example4_chain-step3.sh\n├── example4_chain-step4.sh\n├── example4_chain-step5.sh\n├── example4_chain-step6.sh\n├── example4_submit_all.sh\n├── mouse38_cdna.fa\n├── Mus_musculus.GRCm38.cdna.all.fa\n├── Pfam-A.hmm\n├── pipeline1.sh\n├── Trinotate.sqlite\n└── uniprot_sprot.trinotate_v2.0.pep\n\n0 directories, 13 files\n\nEach job is (importantly) commonly named using #SBATCH –job-name within each job-script. Also within this folder is a simple script (example4_submit_all.sh) that will execute the sbatch command on each of the job-scripts in the correct order:\n\n#!/bin/bash:\n\nfor c in /mnt/clusters/sponsa/data/classdata/Bioinformatics/REFS/slurm/slurm_examples/example4_chain/example4_chain-step?.sh ;\ndo\n sbatch -d singleton $c\ndone\n\nThis sbatch command uses the -d singleton flag to notify slurm of the job-dependencies (all jobs must have the name job name defined by #SBATCH --job-name [some constant name]. At which point each submitted job will be forced to depend on successful completion of any previous job submitted by the same user, and with the same job-name. The full pipeline of 6 jobs will now run to completion, with no further user-intervention, making efficient use of the available resources."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1"
  },
  {
    "objectID": "Images/SRA-submission-master/data-prep.html",
    "href": "Images/SRA-submission-master/data-prep.html",
    "title": "R Notebook",
    "section": "",
    "text": "Prepping data to add to SRA\n\nImport the template\nThe first 11 rows are instructions\n\ntemplate &lt;- read_tsv(\"Model.organism.animal.1.0.tsv\", skip = 11)\n\n\n\nImport the data\n\nligation_ids &lt;- read_genepop(\"~/Documents/genomics_pinskylab/data/seq33_03_baits_only_SNPs.gen\") %&gt;% \n  # choose only the names column\n  select(sample) %&gt;% \n  # remove APCL_ from the ligation_id\n  mutate(ligation_id = str_extract(sample, \"L\\\\d+\")) %&gt;% \n  # remove the names column\n  select(-sample)\n\n# bring in fish data from database\nfish &lt;- fish_anem_dive() %&gt;% \n  filter(!is.na(sample_id)) %&gt;% \n  select(sample_id, sex, date)\n\n#what are the sample_ids for these ligation_ids\nsample_ids &lt;- samp_from_lig(ligation_ids) %&gt;% \n  rename(sample_name = sample_id) %&gt;% \n  # Add the organism\n  mutate(organism = \"Amphiprion clarkii\", \n         isolate = \"not applicable\", \n         tissue = \"tail fin\") %&gt;% \n  left_join(fish, by = c(\"sample_name\" = \"sample_id\")) %&gt;% \n  rename(collection_date = date)\n\n\n\nSRA did not like repeat sample_ids. Removing sample_ids and keeping only ligation ids\n\nlig_only &lt;- sample_ids %&gt;% \n  select(-sample_name) %&gt;% \n  rename(sample_name = ligation_id)\n\n\n\nApparently there are also duplicate ligation_ids\n\ndups &lt;- sample_ids %&gt;% \n  group_by(ligation_id) %&gt;% \n  count() %&gt;% \n  filter(n &gt; 1)\n\n\n\nAccording to this code, there are not duplicates. However, the wording looks like maybe they want unique individuals, as in individuals that were not collected on the same day.\n“Your table upload failed because multiple BioSamples cannot have identical attributes. You should have one BioSample for each specimen, and each of your BioSamples must have differentiating information (excluding sample name, title, bioproject accession and description). This check was implemented to encourage submitters to include distinguishing information in their samples. If the distinguishing information is in the sample name, title or description, please recode it into an appropriate attribute, either one of the predefined attributes or a custom attribute you define. If it is necessary to represent true biological replicates as separate BioSamples, you might add an ‘aliquot’ or ‘replicate’ attribute, e.g., ‘replicate = biological replicate 1’, as appropriate. Note that multiple assay types, e.g., RNA-seq and ChIP-seq data may reference the same BioSample if appropriate.” # To get past this, I am going to include ligation_id in sample name and also include a column called ligation_id (a custom attribute).\n\nsamp_lig &lt;- sample_ids %&gt;% \n  mutate(sample_name = str_c(sample_name, ligation_id, sep = \"_\"))\n\n\n\nSRA requires that we change M to male and F to female and that we define age, development stage\n\nsamp_lig &lt;- samp_lig %&gt;% \n  mutate(sex = ifelse(sex == \"M\", \"male\", sex), \n         sex = ifelse(sex == \"F\", \"female\", sex), \n         sex = ifelse(sex == \"J\", \"not applicable\", sex), \n         dev_stage = ifelse(sex == \"not applicable\", \"juvenile\", NA),\n         dev_stage = ifelse(sex != \"not applicable\", \"adult\", dev_stage)) %&gt;% \n  # remove any non_apcl samples\n  filter(grepl(\"APCL\", sample_name)) %&gt;% \n  arrange(ligation_id)\n\n\n\nSRA requires that these files are 1000 lines or less\n\ntable1 &lt;- samp_lig %&gt;% \n  slice(1:999)\ntable2 &lt;- samp_lig %&gt;% \n  slice(1000:1998)\ntable3 &lt;- samp_lig %&gt;% \n  slice(1998:2881)\n\n\n\nExport the data in tab delimited format\n\nwrite_tsv(table1, \"amphiprion-clarkii-table1.tsv\")\nwrite_tsv(table2, \"amphiprion-clarkii-table2.tsv\")\nwrite_tsv(table3, \"amphiprion-clarkii-table3.tsv\")\n\n\n\nLog on to https://submit.ncbi.nlm.nih.gov/subs/sra/SUB4607463/attributes and upload the table, then hit continue.\n\n\nThe next step is to add metadata\nView the SRA_metadata_PADE.xlsx file in excel\n\n# template2 &lt;- readxl::read_xlsx(\"SRA_metadata_PADE.xlsx\")\n\nSome samples have a different name and need to be replaced\n\n# open the list of files that have weird names\nreplacements &lt;- read_lines(\"list.txt\") %&gt;% \n  str_extract(., \"APCL_L\\\\d+.F-RG.bam\") %&gt;% \n  tibble() %&gt;% \n  rename(sample = \".\") %&gt;% \n  mutate(replace = str_c(str_extract(.,\"APCL_L\\\\d+\"), \"-RG.bam\"))\n\n\n\ncreate table for clarkii data\n\nmetadata &lt;- samp_lig %&gt;% \n  rename(library_ID = ligation_id) %&gt;% \n  mutate(title = \"ddRADseq of Amphiprion clarkii\", \n         library_strategy = \"RAD-Seq\", \n         library_source = \"GENOMIC\", \n         library_selection = \"Reduced Representation\", \n         library_layout = \"single\", \n         platform = \"Illumina\", \n         instrument_model = \"Illumina HiSeq 2500\", \n         design_description = \"ddRADseq using PstI and MluCI, and size selected to 375 ± 38 bp\", \n         filetype = \"bam\", \n         filename = str_c(\"APCL_\", library_ID, \"-RG.bam\", sep = \"\"), \n         assembly = NA\n         ) %&gt;%\n  select(-organism:-dev_stage) %&gt;% \n  # fix names of regeno files\n  mutate(filename = ifelse(filename == \"APCL_L0306-RG.bam\", \"APCL_L0306.L3598-RG.bam\", filename), \n          filename = ifelse(filename == \"APCL_L0308-RG.bam\", \"APCL_L0308.L3599-RG.bam\", filename),\n         filename = ifelse(filename == \"APCL_L0309-RG.bam\", \"APCL_L0309.L3601-RG.bam\", filename),\n         filename = ifelse(filename == \"APCL_L0814-RG.bam\", \"APCL_L0814.L3644-RG.bam\", filename),\n         filename = ifelse(filename == \"APCL_L1188-RG.bam\", \"APCL_L1188.L3266.L3352-RG.bam\", filename),\n         filename = ifelse(filename == \"APCL_L2324-RG.bam\", \"APCL_L2324.L3400-RG.bam\", filename)) %&gt;% \n  mutate(filename = ifelse(filename %in% replacements$replace, str_c(\"APCL_\", library_ID, \"-RG.bam\"), filename))\n\n\n\nSRA requires that these files are 1000 lines or less\n\nmetadata1 &lt;- metadata %&gt;% \n  slice(1:999)\nmetadata2 &lt;- metadata %&gt;% \n  slice(1000:1998)\nmetadata3 &lt;- metadata %&gt;% \n  slice(1998:2886)\n\n\n\nExport the meta data tables\n\nwrite_tsv(metadata1, \"amphiprion-clarkii-metadata1.tsv\")\nwrite_tsv(metadata2, \"amphiprion-clarkii-metadata2.tsv\")\nwrite_tsv(metadata3, \"amphiprion-clarkii-metadata3.tsv\")\n\n\n\nSending the bam files by FTP - COMPRESS Folder INTO TAR!!!\nI logged into the FTP using Fetch following the onscreen instructions and started dragging over bam files.\nHowever, the bam.bai files are also intertwined, it was taking hours, and was timing out before completing all of the transfers.\nI copied all of the bam files into a bam files folder in the data &gt; apcl &gt; all_samples &gt; 20181127 &gt; bam files.\nMaybe I can separate them into folders on my end and then just drag and drop the folder for submission. The folder transfer will take hours but hopefully it won’t time out.\n\n\nThe file names don’t match the metadata\nhand edit the metadata table because it is just a few regenotypes\n\n\nThe first submission is called SUB4607463\nThere is an error of undefined origin, waiting for an email response\n\n\nThe second submission is called SUB6249894\n\nMark no for biosample\nupload table_2 for biosample attributes\ntransferring files starting 11:20am on Monday, 9-9-2019"
  },
  {
    "objectID": "Images/SRA-submission-master/Guide to NCBI SRA.html",
    "href": "Images/SRA-submission-master/Guide to NCBI SRA.html",
    "title": "Guide to contributing to NCBI SRA",
    "section": "",
    "text": "Are you looking to make your science more reproducible and transparent by making your data public? Or do you need to upload your data somewhere before your manuscript can be published? The NCBI Sequence Reach Archive (SRA) is a public searchable platform where genetic data and associated metadata may be uploaded, downloaded and reused.\n\n\nBefore beginning, it is helpful to read through several NCBI pages to understand the necessary data that is required for a successful upload. A good starting point is here. Understanding NCBI’s data hierarchy will also be helpful for understanding how your data should be submitted.\n####A summary of NCBI prefixes####\n\n\n\nPrefix\nAccession Name\nNCBI Definition\nExample\n\n\n\n\nPRJNA\nBioProject\nThe goal of your research effort\nPRJNA477007\n\n\nSRP\nStudy\nAn object that contains project metadata describing sequencing study or project\nSRP150953\n\n\nSAMN\nSample\nAn object that contains metadata describing the physical sample upon which a sequencing experiment was performed\nSAMN09463455\n\n\nSRX\nExperiment\nAn object containing metadata describing the library, platform selection and processing parameters involved in a sequencing experiment\nSRX7621456\n\n\nSRR\nRun\nAn object containing actual sequencing data for a sequencing experiment. Experiments may contain multiple runs if multiple sequencing instrument runs were needed, but preferable data structure is one run per experiment\nSRR10954732\n\n\n\n\n\n\nLog in on to the SRA Submission Portal Wizard\nCreate new submission by clicking on the ‘New Submission’ button. Your submission will receive a temporary SUB# ID, and you can use this to contact SRA staff if you have issues.\n#####Follow steps (you can leave at any step and return to it later). The Submission Portal will check to make sure everything is okay after each step and your position will be displayed on the progress bar.\n Figure 1. NCBI SRA submission progress bar\n1. Submitter information\nYou will be asked for your contact information and affiliations. You can also create a Group, which will allow your collaborators to read, modify, submit and delete your submissions.\n2. General information\nYou will be asked if you already registered your project and samples. Select yes or no. If yes, enter the accession number for your existing BioProject and you will be redirected to Step #6. If no, the Wizard will ask you to create them. Select the release date for your data. The default is immediately.\n3. Project information\nEnter information about your project, including title, a description and grant information.\n4. BioSample type\nSelect the best description for your data. A Pinsky Lab example would be ‘Model organism or animal sample’.\n5. BioSample attributes\nYou will be asked to provide information about your samples. You can either enter it directly into the built-in editor, or download a BioSamples template, fill it out and upload it.\nEnter each sample as a separate line and follow the directions on the template with regards to each of the colored data columns to ensure all necessary data have been included.\nA complete BioSamples template can be viewed here.\n6. SRA metadata\nIf you are entering metadata for new BioSamples, you may either enter the metadata using the built-in editor, or you may download a SRA metadata template, fill it out and upload it. Follow the instructions on the template to ensure all required information about sequencing methodology is included. An example of a SRA metadata template for new BioSamples may be viewed here.\nIf you have previously uploaded SRA metadata, download and complete the SRA metadata template. You must make sure that you include the BioSample accession number so that your new sequences are correctly linked to your existing BioSamples. An easy way to obtain these is to navigate to your previous submission within the submission portal and then to Download the attributes file with BioSample accessions (Figure 2).\n Figure 2. Where to download a file with BioSample accession numbers for previously submitted samples\n7. Files\nNCBI SRA accepts different file types. The Pinsky Lab aims to contribute FASTQ and BAM files for each sequenced individual, plus the reference that reads are aligned to. More information about file types may be found here. The file names need to be the same as those that you specified in the SRA Metadata.\nAs genomic data are large, there are several ways to transfer your sequence data to the NCBI SRA. Within this section of the Submission Portal, NCBI offers several ways to transfer your data: HTTP/Aspera Connect Plugin, FTP/Aspera Command Line or Amazon S3. If your data are less than 10 GB or you have fewer than 300 individuals, you can try to drag files directly into the Submission Portal, which will upload via HTTP. If your data are larger, select Request preload folder button. If you select the method you would like to use, some brief instructions will appear. Here, we will discuss various FTP options in more detail. Note that the time it takes to transfer your data will depend on the size of your data (often hours to days).\nFTP using the command line\n\nCreate a single directory with all the files you want to upload.\nEnsure you have FTP. You may need to install if not.\nNavigate to the directory all the files you want to upload are.\nEstablish a FTP connection by typing ftp -i.\nNext, type open ftp-private.ncbi.nlm.nih.gov.\nProvide your username this is listed in the Submission Portal, likely subftp.\nProvide the password listed in the Submission Portal.\nNavigate to your account folder listed in the Submission Portal: cd uploads/your_account_folder_name\nCreate a subfolder. You must do this or you will not be able to see your files in the preload option: mkdir new_folder_name\nNavigate into the target folder: cd new_folder_name\nCopy your files into the target folder: mput *\nGo back to the Submission Portal and select the folder to upload. It takes at least 10 minutes for transferred files to appear in the preload option.\nTo exit the FTP window, type bye.\n\nFTP using third-party software (Fetch, for example)\n\nOpen a Fetch window and connect to the NCBI server by typing in the hostname, your username and password, and direct Fetch to your new_folder_name within your_account_folder_name (Figure 3).\nOpen another Fetch window and connect to the location of your data.\nHighlight the files you want to transfer and drag into the Fetch window that is connected to the NCBI server. This will copy your files from your server to the NCBI server.\nGo back to the Submission Portal and select the folder to upload. It takes at least 10 minutes for transferred files to appear in the preload option.\n\n Figure 3. Screenshot showing how to connect to the NCBI server using Fetch\n8. Review & submit\nThe Submission Portal will check to make sure all your sequencing files have correctly transferred. It will also check to make sure that you have uploaded sequence data for all listed BioSamples. Review all the information before completing the submission. If an error arises during processing, you’ll receive an email asking you to contact SRA staff.\n\n\n\nIf you run into trouble, there is a SRA Submission Portal Troubleshooting Guide, or email SRA staff at sra@ncbi.nlm.nih.gov"
  },
  {
    "objectID": "Images/SRA-submission-master/Guide to NCBI SRA.html#getting-started",
    "href": "Images/SRA-submission-master/Guide to NCBI SRA.html#getting-started",
    "title": "Guide to contributing to NCBI SRA",
    "section": "",
    "text": "Before beginning, it is helpful to read through several NCBI pages to understand the necessary data that is required for a successful upload. A good starting point is here. Understanding NCBI’s data hierarchy will also be helpful for understanding how your data should be submitted.\n####A summary of NCBI prefixes####\n\n\n\nPrefix\nAccession Name\nNCBI Definition\nExample\n\n\n\n\nPRJNA\nBioProject\nThe goal of your research effort\nPRJNA477007\n\n\nSRP\nStudy\nAn object that contains project metadata describing sequencing study or project\nSRP150953\n\n\nSAMN\nSample\nAn object that contains metadata describing the physical sample upon which a sequencing experiment was performed\nSAMN09463455\n\n\nSRX\nExperiment\nAn object containing metadata describing the library, platform selection and processing parameters involved in a sequencing experiment\nSRX7621456\n\n\nSRR\nRun\nAn object containing actual sequencing data for a sequencing experiment. Experiments may contain multiple runs if multiple sequencing instrument runs were needed, but preferable data structure is one run per experiment\nSRR10954732"
  },
  {
    "objectID": "Images/SRA-submission-master/Guide to NCBI SRA.html#submitting",
    "href": "Images/SRA-submission-master/Guide to NCBI SRA.html#submitting",
    "title": "Guide to contributing to NCBI SRA",
    "section": "",
    "text": "Log in on to the SRA Submission Portal Wizard\nCreate new submission by clicking on the ‘New Submission’ button. Your submission will receive a temporary SUB# ID, and you can use this to contact SRA staff if you have issues.\n#####Follow steps (you can leave at any step and return to it later). The Submission Portal will check to make sure everything is okay after each step and your position will be displayed on the progress bar.\n Figure 1. NCBI SRA submission progress bar\n1. Submitter information\nYou will be asked for your contact information and affiliations. You can also create a Group, which will allow your collaborators to read, modify, submit and delete your submissions.\n2. General information\nYou will be asked if you already registered your project and samples. Select yes or no. If yes, enter the accession number for your existing BioProject and you will be redirected to Step #6. If no, the Wizard will ask you to create them. Select the release date for your data. The default is immediately.\n3. Project information\nEnter information about your project, including title, a description and grant information.\n4. BioSample type\nSelect the best description for your data. A Pinsky Lab example would be ‘Model organism or animal sample’.\n5. BioSample attributes\nYou will be asked to provide information about your samples. You can either enter it directly into the built-in editor, or download a BioSamples template, fill it out and upload it.\nEnter each sample as a separate line and follow the directions on the template with regards to each of the colored data columns to ensure all necessary data have been included.\nA complete BioSamples template can be viewed here.\n6. SRA metadata\nIf you are entering metadata for new BioSamples, you may either enter the metadata using the built-in editor, or you may download a SRA metadata template, fill it out and upload it. Follow the instructions on the template to ensure all required information about sequencing methodology is included. An example of a SRA metadata template for new BioSamples may be viewed here.\nIf you have previously uploaded SRA metadata, download and complete the SRA metadata template. You must make sure that you include the BioSample accession number so that your new sequences are correctly linked to your existing BioSamples. An easy way to obtain these is to navigate to your previous submission within the submission portal and then to Download the attributes file with BioSample accessions (Figure 2).\n Figure 2. Where to download a file with BioSample accession numbers for previously submitted samples\n7. Files\nNCBI SRA accepts different file types. The Pinsky Lab aims to contribute FASTQ and BAM files for each sequenced individual, plus the reference that reads are aligned to. More information about file types may be found here. The file names need to be the same as those that you specified in the SRA Metadata.\nAs genomic data are large, there are several ways to transfer your sequence data to the NCBI SRA. Within this section of the Submission Portal, NCBI offers several ways to transfer your data: HTTP/Aspera Connect Plugin, FTP/Aspera Command Line or Amazon S3. If your data are less than 10 GB or you have fewer than 300 individuals, you can try to drag files directly into the Submission Portal, which will upload via HTTP. If your data are larger, select Request preload folder button. If you select the method you would like to use, some brief instructions will appear. Here, we will discuss various FTP options in more detail. Note that the time it takes to transfer your data will depend on the size of your data (often hours to days).\nFTP using the command line\n\nCreate a single directory with all the files you want to upload.\nEnsure you have FTP. You may need to install if not.\nNavigate to the directory all the files you want to upload are.\nEstablish a FTP connection by typing ftp -i.\nNext, type open ftp-private.ncbi.nlm.nih.gov.\nProvide your username this is listed in the Submission Portal, likely subftp.\nProvide the password listed in the Submission Portal.\nNavigate to your account folder listed in the Submission Portal: cd uploads/your_account_folder_name\nCreate a subfolder. You must do this or you will not be able to see your files in the preload option: mkdir new_folder_name\nNavigate into the target folder: cd new_folder_name\nCopy your files into the target folder: mput *\nGo back to the Submission Portal and select the folder to upload. It takes at least 10 minutes for transferred files to appear in the preload option.\nTo exit the FTP window, type bye.\n\nFTP using third-party software (Fetch, for example)\n\nOpen a Fetch window and connect to the NCBI server by typing in the hostname, your username and password, and direct Fetch to your new_folder_name within your_account_folder_name (Figure 3).\nOpen another Fetch window and connect to the location of your data.\nHighlight the files you want to transfer and drag into the Fetch window that is connected to the NCBI server. This will copy your files from your server to the NCBI server.\nGo back to the Submission Portal and select the folder to upload. It takes at least 10 minutes for transferred files to appear in the preload option.\n\n Figure 3. Screenshot showing how to connect to the NCBI server using Fetch\n8. Review & submit\nThe Submission Portal will check to make sure all your sequencing files have correctly transferred. It will also check to make sure that you have uploaded sequence data for all listed BioSamples. Review all the information before completing the submission. If an error arises during processing, you’ll receive an email asking you to contact SRA staff."
  },
  {
    "objectID": "Images/SRA-submission-master/Guide to NCBI SRA.html#troubleshooting",
    "href": "Images/SRA-submission-master/Guide to NCBI SRA.html#troubleshooting",
    "title": "Guide to contributing to NCBI SRA",
    "section": "",
    "text": "If you run into trouble, there is a SRA Submission Portal Troubleshooting Guide, or email SRA staff at sra@ncbi.nlm.nih.gov"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Big Data Science",
    "section": "",
    "text": "Big Data Science - BIT107\nThe material associated with this git hub repository is workshop instructions linked to the Big Data Science Module BIT107, integral module for the Msc in Big Data Biology hosted by Cardiff School of Biosciences, Cardiff University. If you would like to know more about our course or any other masters course at Cardiff University please visit our website - Big Data Biology (MSc)."
  }
]