{
  "hash": "ecc38c66da1e93baf1a4bc86beb988fa",
  "result": {
    "markdown": "---\ntitle-block-style: default\ntitle-block-banner: darkred\ntitle-block-banner-color: white\ntitle: \"Slurm Dependencies\"\nsubtitle: \"Towards Pipelines\"\nauthor: \"Prof. Peter Kille\"\ndate: today\naffiliation: \"Cardiff University\"\n---\n\n\n<body style=\"background-color:gray99;\">\n\n\n\n\n\n![](Images/logo.jpg){width=\"10%\"}\n\n# Dependencies\n\nIf you have a series of bioinformatic processes you want to execute that for a 'chain' where each step is dependent on the output of the previous step this can be considered as a simple 'workflow'. You can code these very simply in slurm labeling each job with the same name ```#SBATCH --job-name=[my_unique_jobname]``` and then calling each slurm scrip from a single file with teh command ```sbatch -d singleton [script_name]```\n\n##\nComponent scripts start:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n#!/bin/bash\n#SBATCH --job-name=test_workflow\n#SBATCH --partition=defq       # the requested queue\n#SBATCH --nodes=1              # number of nodes to use\n#SBATCH --tasks-per-node=1     #\n#SBATCH --cpus-per-task=1      #   \n#SBATCH --mem-per-cpu=1000     # in megabytes, unless unit explicitly stated\n#SBATCH --error=%J.err         # redirect stderr to this file\n#SBATCH --output=%J.out        # redirect stdout to this file\n......\n\nand your workflow scripts \n#!/bin/bash\n\nsbatch -d singleton [slurm_script1]\n\nsbatch -d singleton [slurm_script2]\n```\n:::\n\n\n::: callout-important\n## Exercise: Make your instance based transcriptomic processes slurm compatible WORKFLOW\n\nIn Session 5 of you bioinformatics introductory lectures you were given scripts to pre-process, map, count and call duplicates - [RNAseq Processing](https://peter-kille.github.io/Bioinformatics_TrainingWeb/5.1_RNAseq_processing.html).  I want you to transfer these and the data to scratch and convert these to slurm compatible scripts.\n\n**LEAVE OUT STAR LIBRARY FORMTTING STEP**\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}